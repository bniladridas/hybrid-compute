---
name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  # ────────────────────────────── Lint & Polish ──────────────────────────────
  lint-and-polish:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black isort ruff yamllint pre-commit

      - name: Run linters
        run: |
          black --check --line-length=127 .
          isort --check-only --profile black --line-length=127 .
          ruff check .
          yamllint --strict .
          pre-commit run --all-files

  # ────────────────────────────── Build & Test ──────────────────────────────
  test-and-build:
    needs: lint-and-polish
    runs-on: ${{ matrix.os }}
    timeout-minutes: 90
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            cuda: "13.0.1"
            tag: ""
          - os: ubuntu-latest
            cuda: ""
            tag: "-cpu"
          - os: macos-latest
            cuda: ""
            tag: "-macos"
          - os: windows-latest
            cuda: ""
            tag: "-windows"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update && sudo DEBIAN_FRONTEND=noninteractive apt-get install -y \
            cmake build-essential libopencv-dev python3 python3-pip git \
            && sudo rm -rf /var/lib/apt/lists/*
          pip3 install --break-system-packages -r requirements.txt

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install cmake opencv python3

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install cmake opencv python3

      - name: Build & Test
        shell: bash
        run: |
          mkdir build
          cd build
          if [ "${{ matrix.cuda }}" != "" ]; then
            cmake .. -DCMAKE_BUILD_TYPE=Release -DUSE_CUDA=ON -DWITH_OPENCV=ON
          else
            cmake .. -DCMAKE_BUILD_TYPE=Release -DUSE_CUDA=OFF -DWITH_OPENCV=ON
          fi
          if [ "$RUNNER_OS" == "Windows" ]; then
            cmake --build . --config Release --parallel $NUMBER_OF_PROCESSORS
          else
            make -j$(nproc)
          fi
          if [ "$RUNNER_OS" == "Windows" ]; then
            ctest --output-on-failure --timeout 300 --parallel $NUMBER_OF_PROCESSORS
          else
            ctest --output-on-failure --timeout 300 --parallel $(nproc)
          fi

  # ────────────────────────────── Docker Build & Test ──────────────────────────────
  docker:
    needs: test-and-build
    runs-on: ubuntu-latest
    timeout-minutes: 120
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        include:
          - cuda-version: "13.0.1"
            tag-suffix: ""
          - cuda-version: ""
            tag-suffix: "-cpu"
    steps:
      - uses: actions/checkout@v4

      - name: Install test dependencies
        run: pip3 install --break-system-packages opencv-python numpy

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set image tags
        run: |
          REG="ghcr.io"
          OWNER="${{ github.repository_owner }}"
          NAME="hybrid-compute-gpu"
          TAG_BASE="$REG/$OWNER/$NAME"
          echo "IMAGE_TAG1=$TAG_BASE:${{ github.sha }}" >> $GITHUB_ENV
          echo "IMAGE_TAG2=$TAG_BASE:latest" >> $GITHUB_ENV

      - name: Build & push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.cuda-version != '' && 'Dockerfile.cuda' || 'Dockerfile' }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.IMAGE_TAG1 }}
            ${{ env.IMAGE_TAG2 }}
          build-args: |
            BUILDKIT_INLINE_CACHE=1
          cache-from: type=gha
          cache-to: type=gha,mode=max
          retry: 3
          retry-delay: 10

      - name: Test container execution
        if: github.event_name != 'pull_request'
        run: |
          mkdir -p test_images
          python3 create_test_image.py
          cp test_images/test.jpg test_images/input.jpg

          GPU="${{ matrix.cuda-version != '' && 'true' || 'false' }}"
          if [ "$GPU" = "true" ]; then
            timeout 60 docker run --entrypoint bash "${{ env.IMAGE_TAG1 }}" \
              -c "test -x /app/upscale && echo OK"
          else
            echo "Running CPU mode..."
            timeout 60 docker run --entrypoint bash "${{ env.IMAGE_TAG1 }}" \
              -c "test -x /app/build/bin/preprocess_c && echo OK"
          fi

  # ────────────────────────────── Dependabot Auto-Merge ──────────────────────────────
  dependabot-auto-merge:
    needs: docker
    runs-on: ubuntu-latest
    if: github.actor == 'dependabot[bot]'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Merge Dependabot PR
        env:
          GH_TOKEN: ${{ secrets.DEPENDABOT_MERGE_TOKEN }}
        run: gh pr merge ${{ github.event.pull_request.number }} --squash --delete-branch=false

  # ────────────────────────────── Code Scanning ──────────────────────────────
  codeql:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: ['cpp', 'python']  # cpp covers C and C++
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
