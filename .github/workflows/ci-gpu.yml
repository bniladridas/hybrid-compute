---
name: CI with GPU Support

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  IMAGE_NAME: hybrid-compute-gpu
  REGISTRY: ghcr.io
  IMAGE_TAG: ${{ github.sha }}

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    strategy:
      matrix:
        include:
          - cuda-version: "11.8.0"
            cudnn-version: "8"
            tag-suffix: ""
          - cuda-version: ""
            cudnn-version: ""
            tag-suffix: "-cpu"
    container:
      image: >-
        ${{ matrix.cuda-version != '' &&
          format('nvidia/cuda:{0}-base-ubuntu22.04', matrix.cuda-version) ||
          'ubuntu:22.04' }}

    steps:
    - name: Check GPU
      timeout-minutes: 2
      run: |
        set -e
        echo "Checking GPU availability..."
        nvidia-smi || echo "No GPU detected, continuing with CPU-only build"

    - name: Checkout code
      uses: actions/checkout@v4
      timeout-minutes: 5

    - name: Install dependencies
      timeout-minutes: 15
      run: |
        set -e
        echo "Installing dependencies..."
        apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y \
          cmake \
          build-essential \
          libopencv-dev \
          python3 \
          python3-pip \
          git \
          && rm -rf /var/lib/apt/lists/*
        pip3 install -r requirements.txt

    - name: Build and Test
      timeout-minutes: 20
      run: |
        set -e
        echo "Building project..."
        mkdir -p build && cd build
        USE_CUDA_FLAG=${{ matrix.cuda-version != '' && 'ON' || 'OFF' }}
        cmake .. \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_VERBOSE_MAKEFILE=ON \
          -DUSE_CUDA=$USE_CUDA_FLAG
        make -j$(nproc) VERBOSE=1
        echo "Running tests..."
        ctest --output-on-failure --timeout 300 --parallel $(nproc)

  docker:
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      timeout-minutes: 5

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      timeout-minutes: 5

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      timeout-minutes: 5
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set image tags
      run: |
        REG="${{ env.REGISTRY }}"
        OWNER="${{ github.repository_owner }}"
        NAME="${{ env.IMAGE_NAME }}${{ matrix.tag-suffix }}"
        TAG_BASE="$REG/$OWNER/$NAME"
        echo "IMAGE_TAG1=$TAG_BASE:${{ env.IMAGE_TAG }}" >> $GITHUB_ENV
        echo "IMAGE_TAG2=$TAG_BASE:latest" >> $GITHUB_ENV

    - name: Build and push Docker image
      timeout-minutes: 30
      uses: docker/build-push-action@v5
      with:
        context: .
        file: >-
          ${{ matrix.cuda-version != '' &&
          'Dockerfile.cuda' || 'Dockerfile' }}
        push: ${{ github.event_name != 'pull_request' }}
        tags: |
          ${{ env.IMAGE_TAG1 }}
          ${{ env.IMAGE_TAG2 }}
        build-args: |
          ${{ matrix.cuda-version != '' && 'NVIDIA_VISIBLE_DEVICES=all' || '' }}
          BUILDKIT_INLINE_CACHE=1
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      if: github.event_name != 'pull_request'
      timeout-minutes: 15
      run: |
         set -e
         TAG_SUFFIX="${{ matrix.tag-suffix }}"
         IMAGE_TAG="${{ env.IMAGE_NAME }}${TAG_SUFFIX}:${{ env.IMAGE_TAG }}"

          if [ "${{ matrix.cuda-version }}" != "" ] \
            && command -v nvidia-smi >/dev/null 2>&1; then
           echo "Running GPU test..."
            timeout 600 docker run --gpus all \
              -e DEBIAN_FRONTEND=noninteractive \
              -v $(pwd)/test_images:/test_images \
              ${{ env.IMAGE_TAG1 }} \
              /app/bin/upscale /test_images/input.jpg /test_images/output.jpg
           else
             echo "Running CPU test..."
            timeout 300 docker run \
              -e DEBIAN_FRONTEND=noninteractive \
              -v $(pwd)/test_images:/test_images \
              ${{ env.IMAGE_TAG1 }} \
              /app/bin/upscale /test_images/input.jpg /test_images/output.jpg
           fi
