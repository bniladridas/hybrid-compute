---
name: CI CUDA

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  IMAGE_NAME: hybrid-compute-cuda
  REGISTRY: ghcr.io
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        gpu: [true, false]  # true = GPU build, false = CPU fallback

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          apt-get update && apt-get install -y --no-install-recommends \
            cmake build-essential python3 python3-pip git \
            libopencv-core-dev pkg-config \
            && rm -rf /var/lib/apt/lists/*

      - name: Install Python dependencies
        run: pip3 install --no-cache-dir -r requirements.txt

      - name: Build project
        run: |
          mkdir -p build && cd build
          if [ "${{ matrix.gpu }}" = "true" ]; then
            cmake .. -DCMAKE_BUILD_TYPE=Release -DUSE_CUDA=ON
          else
            cmake .. -DCMAKE_BUILD_TYPE=Release -DUSE_CUDA=OFF
          fi
          make -j"$(nproc)"

      - name: Run tests
        run: |
          cd build
          ctest --output-on-failure --timeout 300 --parallel "$(nproc)"

  docker:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          TAG="${{ env.REGISTRY }}/${{ github.repository }}:${{ env.IMAGE_TAG }}"
          if [ "${{ needs.build.outputs.gpu }}" = "true" ]; then
            docker build --build-arg USE_CUDA=ON -f Dockerfile.cuda -t "$TAG" .
          else
            CPU_TAG="${{ env.REGISTRY }}/${{ github.repository }}-cpu:${{ env.IMAGE_TAG }}"
            docker build --build-arg USE_CUDA=OFF -f Dockerfile.cuda -t "$CPU_TAG" .
          fi
          docker push "$TAG"
