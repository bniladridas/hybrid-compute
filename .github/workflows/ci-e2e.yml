---
name: CI E2E

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  e2e:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      timeout-minutes: 5

    - name: Setup Miniconda (macOS)
      if: runner.os == 'macOS'
      timeout-minutes: 10
      uses: conda-incubator/setup-miniconda@v3
      with:
        auto-update-conda: true

    - name: Install dependencies
      timeout-minutes: 15
      shell: bash
      run: |
        set -e
        echo "Installing system dependencies..."
        if [ "$RUNNER_OS" == "Windows" ]; then
          export PATH="$CONDA/bin:$PATH"
        fi
        if [ "$RUNNER_OS" == "Linux" ]; then
          sudo DEBIAN_FRONTEND=noninteractive apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y cmake \
            libopencv-dev build-essential imagemagick
        elif [ "$RUNNER_OS" == "macOS" ]; then
          brew install imagemagick coreutils
          conda install opencv cmake
        elif [ "$RUNNER_OS" == "Windows" ]; then
          C:/Miniconda/Scripts/conda install opencv cmake
          choco install imagemagick
        fi

    - name: Install Python dependencies
      timeout-minutes: 10
      shell: bash
      run: |
        set -e
        echo "Installing Python dependencies..."
        if [ "$RUNNER_OS" == "Windows" ]; then
          C:/Miniconda/Scripts/conda install numpy pytest
        elif [ "$RUNNER_OS" == "macOS" ]; then
          conda install numpy pytest coverage
        else
          python3 -m pip install --break-system-packages -r requirements.txt
        fi

    - name: Build preprocess
      timeout-minutes: 15
      shell: bash
      run: |
        set -e
        echo "Building project..."
        mkdir build
        cd build
        if [ "$RUNNER_OS" == "Windows" ]; then
          cmake .. -DCMAKE_PREFIX_PATH=C:/Miniconda/Library \
            -DCMAKE_BUILD_TYPE=Release
        elif [ "$RUNNER_OS" == "macOS" ]; then
          eval "$(conda shell.bash hook)"
          conda activate base
          CONDA_PREFIX=$CONDA_PREFIX cmake .. -DCMAKE_BUILD_TYPE=Release
        else
          cmake .. -DCMAKE_BUILD_TYPE=Release
        fi
        cmake --build . --config Release \
          --parallel $(nproc 2>/dev/null || echo 2)

    - name: Run unit tests
      timeout-minutes: 10
      shell: bash
      run: |
         set -e
         echo "Running unit tests..."
         if [ "$RUNNER_OS" == "Windows" ]; then
           eval "$(C:/Miniconda/Scripts/conda shell.bash hook)"
           conda activate base
           python -m pytest tests/
         elif [ "$RUNNER_OS" == "macOS" ]; then
           eval "$(conda shell.bash hook)"
           conda activate base
           python -m pytest tests/
         else
           python3 -m pytest tests/
         fi
         cd build && ctest -E "user_counters_tabular_test" -C Release \
           --timeout 300 --parallel $(nproc 2>/dev/null || echo 2)

    - name: Run e2e test (Linux/macOS)
      if: runner.os != 'Windows'
      timeout-minutes: 15
      run: |
        set -e
        echo "Running E2E tests..."
        if [ "$RUNNER_OS" == "macOS" ]; then
          eval "$(conda shell.bash hook)"
          conda activate base
        fi
        gtimeout 900 python3 scripts/e2e.py

    - name: Run e2e test (Windows)
      if: runner.os == 'Windows'
      timeout-minutes: 15
      shell: bash
      run: |
        set -e
        echo "Running E2E tests..."
        eval "$(C:/Miniconda/Scripts/conda shell.bash hook)"
        conda activate base
        timeout 900 python scripts/e2e.py

    - name: Upload coverage to Codecov
      timeout-minutes: 5
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
