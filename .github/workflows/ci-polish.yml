---
name: CI Polish

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  polish:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      timeout-minutes: 5

    - name: Set up Python
      timeout-minutes: 5
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      timeout-minutes: 10
      run: |
        set -e
        echo "Installing dependencies..."
        ./scripts/setup-ci.sh linux

    - name: Run pre-commit (strict)
      timeout-minutes: 10
      run: |
        set -e
        echo "Running pre-commit..."
        pre-commit run --all-files --show-diff-on-failure

    - name: Build with warnings as errors
      timeout-minutes: 15
      run: |
          set -e
          echo "Building with warnings as errors..."
          sudo apt-get update
          sudo apt-get install -y cmake libopencv-dev build-essential clang-tidy
          mkdir build
          cd build
          cmake .. \
            -DCMAKE_CXX_FLAGS="-Werror -Wall -Wextra" \
            -DCMAKE_C_FLAGS="-Werror -Wall -Wextra" \
            -DCMAKE_BUILD_TYPE=Release \
            -DENABLE_BENCHMARK=OFF
          make -j$(nproc) VERBOSE=1

    - name: Run clang-tidy on C/C++ code
      timeout-minutes: 10
      run: |
        set -e
        echo "Running clang-tidy..."
        cd build
        # Run clang-tidy on source files (warnings as errors)
        find ../src ../include ../tests \
          -name "*.cpp" -o -name "*.c" -o -name "*.hpp" -o -name "*.h" | \
          xargs -I {} timeout 300 clang-tidy {} \
            -I/usr/include/opencv4 \
            -Wno-clang-analyzer-security \
            --warnings-as-errors=* || echo "clang-tidy failed on some files"

    - name: Run unit tests with strict output
      timeout-minutes: 10
      run: |
        set -e
        echo "Running unit tests..."
        cd build
        ctest --output-on-failure --verbose --timeout 300 --parallel $(nproc)

    - name: Run Python tests with coverage
      timeout-minutes: 10
      run: |
        set -e
        echo "Running Python tests with coverage..."
        pip install -r requirements.txt
        timeout 600 python -m pytest tests/ -v --cov=. \
          --cov-fail-under=80 --strict-markers --timeout=300
        coverage report --fail-under=80 --ignore-errors

    - name: Run mypy for type checking
      timeout-minutes: 10
      run: |
        set -e
        echo "Running mypy type checking..."
        timeout 300 mypy scripts/ tests/ \
          --ignore-missing-imports --strict \
          --no-error-summary --no-namespace-packages
