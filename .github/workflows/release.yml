---
name: Release

on:
  release:
    types: [published]

jobs:
  build:
    name: Build and Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            name: linux
            cmake_args: -DCMAKE_BUILD_TYPE=Release -DWITH_CUDA=OFF
            asset_name: hybrid-compute-linux
          - os: macos-latest
            name: macos
            cmake_args: -DCMAKE_BUILD_TYPE=Release -DWITH_CUDA=OFF
            asset_name: hybrid-compute-macos
          - os: windows-latest
            name: windows
            cmake_args: -DCMAKE_BUILD_TYPE=Release -DWITH_CUDA=OFF
            asset_name: hybrid-compute-windows.exe

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up dependencies
      run: |
        if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
          sudo apt-get update
          sudo apt-get install -y cmake build-essential libopencv-dev
        elif [ "${{ matrix.os }}" == "macos-latest" ]; then
          brew install cmake opencv
        elif [ "${{ matrix.os }}" == "windows-latest" ]; then
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'
          # OpenCV via vcpkg or prebuilt
        fi

    - name: Configure CMake
      run: |
        mkdir build
        cd build
        cmake ${{ matrix.cmake_args }} ..

    - name: Build
      run: |
        cd build
        cmake --build . --config Release

    - name: Set asset variables
      run: |
        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          echo "ASSET_EXT=zip" >> $GITHUB_ENV
          echo "ASSET_TYPE=application/zip" >> $GITHUB_ENV
        else
          echo "ASSET_EXT=tar.gz" >> $GITHUB_ENV
          echo "ASSET_TYPE=application/gzip" >> $GITHUB_ENV
        fi
        echo "ASSET_PATH=./${{ matrix.asset_name }}.$ASSET_EXT" >> $GITHUB_ENV
        echo "ASSET_NAME=${{ matrix.asset_name }}.$ASSET_EXT" >> $GITHUB_ENV

    - name: Package binaries
      run: |
        cd build/bin
        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          7z a ../../${{ matrix.asset_name }}.zip *
        else
          tar -czf ../../${{ matrix.asset_name }}.tar.gz *
        fi

    - name: Upload release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ${{ env.ASSET_PATH }}
        asset_name: ${{ env.ASSET_NAME }}
        asset_content_type: ${{ env.ASSET_TYPE }}

  update_release_notes:
    name: Update Release Notes
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Update release with details
      run: |
        NOTES="## Hybrid Compute Release

        This release includes cross-platform binaries for image upscaling.

        ### Features:
        - Cross-platform GPU support (Metal on macOS, CUDA on Linux/Windows).
        - Efficient 2x bicubic upscaling with local tiling and stitching.
        - Comprehensive testing and CI/CD pipeline.

        ### Binaries:
        - Linux: hybrid-compute-linux.tar.gz
        - macOS: hybrid-compute-macos.tar.gz
        - Windows: hybrid-compute-windows.zip

        ### Usage:
        1. Extract the archive.
        2. Run: ./upscaler input.jpg output.jpg

        For more details, see the repository README."

        gh release edit ${{ github.event.release.tag_name }} --notes "$NOTES"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
