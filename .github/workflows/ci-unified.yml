---
name: Unified CI/CD

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  release:
    types: [published]
  schedule:
    - cron: '0 0 * * 1'  # weekly CodeQL run

env:
  IMAGE_NAME: hybrid-compute
  REGISTRY: ghcr.io

jobs:

  polish:
    name: Lint and Python Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # Cache pip dependencies
      - name: Cache Python packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: pip-${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}

      - run: ./scripts/setup-ci.sh linux

      - run: pre-commit run --all-files --show-diff-on-failure

      - run: sudo apt-get update && sudo apt-get install -y cmake libopencv-dev build-essential clang-tidy

      - run: |
          mkdir build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS="-Werror -Wall -Wextra" -DENABLE_BENCHMARK=OFF
          make -j$(nproc)

      - run: |
          cd build
          find ../src ../include ../tests -name "*.cpp" -o -name "*.hpp" | \
            xargs -I {} clang-tidy {} -I/usr/include/opencv4 --warnings-as-errors=*

      - run: pip install -r requirements.txt

      - run: python -m pytest tests/ -v --cov=. --cov-fail-under=80

  build:
    name: Build and Test CPU/GPU
    runs-on: ubuntu-latest
    needs: polish
    strategy:
      matrix:
        build-mode: [cpu, gpu]
    steps:
      - uses: actions/checkout@v4

      # Cache CMake build
      - name: Cache CMake
        uses: actions/cache@v3
        with:
          path: build
          key: build-${{ matrix.build-mode }}-${{ github.sha }}

      - run: ./scripts/setup-ci.sh linux ${{ matrix.build-mode }}

      - run: |
          mkdir -p build && cd build
          cmake .. -DUSE_CUDA=${{ matrix.build-mode == 'gpu' && 'ON' || 'OFF' }} -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)

      - run: cd build && ctest --output-on-failure --parallel $(nproc)

  docker:
    name: Docker Build and Test
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Cache Docker layers
      - uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: docker-cache-${{ github.sha }}
          policy: pull

      - run: |
          docker build --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache-new,mode=max \
            -t hybrid-compute-cpu --build-arg USE_CUDA=OFF .
          docker build --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache-new,mode=max \
            -f Dockerfile.cuda -t hybrid-compute-gpu --build-arg USE_CUDA=ON .

      - run: mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - run: |
          docker run --rm hybrid-compute-cpu /app/upscale --help
          docker run --gpus all --rm hybrid-compute-gpu /app/upscale --help

  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    strategy:
      matrix:
        language: [cpp, c, python]
    steps:
      - uses: actions/checkout@v4
      - uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
      - uses: github/codeql-action/autobuild@v3
      - uses: github/codeql-action/analyze@v3

  release:
    name: Release Binaries
    runs-on: ${{ matrix.os }}
    needs: build
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            name: linux
            cmake_args: -DCMAKE_BUILD_TYPE=Release -DWITH_CUDA=ON
            asset_name: hybrid-compute-linux
          - os: macos-latest
            name: macos
            cmake_args: -DCMAKE_BUILD_TYPE=Release -DWITH_CUDA=OFF
            asset_name: hybrid-compute-macos
          - os: windows-latest
            name: windows
            cmake_args: -DCMAKE_BUILD_TYPE=Release -DWITH_CUDA=OFF
            asset_name: hybrid-compute-windows.exe
    steps:
      - uses: actions/checkout@v4
      - run: |
          if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            sudo apt-get update && sudo apt-get install -y cmake build-essential libopencv-dev
          elif [ "${{ matrix.os }}" == "macos-latest" ]; then
            brew install cmake opencv
          elif [ "${{ matrix.os }}" == "windows-latest" ]; then
            choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'
      - run: |
          mkdir -p build && cd build
          cmake ${{ matrix.cmake_args }} ..
          cmake --build . --config Release
      - run: |
          cd build/bin
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            7z a ../../${{ matrix.asset_name }}.zip *
          else
            tar -czf ../../${{ matrix.asset_name }}.tar.gz *
      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./build/../${{ matrix.asset_name }}.${{ matrix.os == 'windows-latest' && 'zip' || 'tar.gz' }}
          asset_name: ${{ matrix.asset_name }}.${{ matrix.os == 'windows-latest' && 'zip' || 'tar.gz' }}
          asset_content_type: ${{ matrix.os == 'windows-latest' && 'application/zip' || 'application/gzip' }}
