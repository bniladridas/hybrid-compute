---
name: CI Unified

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  IMAGE_NAME: hybrid-compute-gpu
  REGISTRY: ghcr.io
  IMAGE_TAG: ${{ github.sha }}

jobs:
  # ────────────────────────────── Lint & Polish ──────────────────────────────
  lint-and-polish:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black isort ruff yamllint pre-commit

      - name: Run linters
        run: |
          black --check --line-length=127 .
          isort --check-only --profile black --line-length=127 .
          ruff check .
          yamllint --strict .
          pre-commit run --all-files

  # ────────────────────────────── Build & Test GPU/CPU ──────────────────────────────
  test-and-build:
    needs: lint-and-polish
    runs-on: ubuntu-latest
    timeout-minutes: 90
    strategy:
      matrix:
        include:
          - cuda-version: "11.8.0"
            tag-suffix: ""
          - cuda-version: ""
            tag-suffix: "-cpu"
    container:
      image: >-
        ${{ matrix.cuda-version != '' &&
          format('nvidia/cuda:{0}-base-ubuntu22.04', matrix.cuda-version) ||
          'ubuntu:22.04' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y \
            cmake build-essential libopencv-dev python3 python3-pip git \
            && rm -rf /var/lib/apt/lists/*
          pip3 install -r requirements.txt

      - name: Build & Test
        run: |
          mkdir -p build && cd build
          USE_CUDA_FLAG=${{ matrix.cuda-version != '' && 'ON' || 'OFF' }}
          cmake .. -DCMAKE_BUILD_TYPE=Release -DUSE_CUDA=$USE_CUDA_FLAG
          make -j$(nproc)
          ctest --output-on-failure --timeout 300 --parallel $(nproc)

  # ────────────────────────────── Docker Build & Test ──────────────────────────────
  docker:
    needs: test-and-build
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        include:
          - cuda-version: "11.8.0"
            tag-suffix: ""
          - cuda-version: ""
            tag-suffix: "-cpu"
    steps:
      - uses: actions/checkout@v4

      - name: Install test dependencies
        run: pip3 install opencv-python numpy

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set image tags
        run: |
          REG="${{ env.REGISTRY }}"
          OWNER="${{ github.repository_owner }}"
          NAME="${{ env.IMAGE_NAME }}${{ matrix.tag-suffix }}"
          TAG_BASE="$REG/$OWNER/$NAME"
          echo "IMAGE_TAG1=$TAG_BASE:${{ env.IMAGE_TAG }}" >> $GITHUB_ENV
          echo "IMAGE_TAG2=$TAG_BASE:latest" >> $GITHUB_ENV

      - name: Build & push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.cuda-version != '' && 'Dockerfile.cuda' || 'Dockerfile' }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.IMAGE_TAG1 }}
            ${{ env.IMAGE_TAG2 }}
          build-args: |
            BUILDKIT_INLINE_CACHE=1
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test container execution
        if: github.event_name != 'pull_request'
        run: |
          mkdir -p test_images
          python3 create_test_image.py
          cp test_images/test.jpg test_images/input.jpg

          GPU="${{ matrix.cuda-version != '' && 'true' || 'false' }}"
          if [ "$GPU" = "true" ]; then
            timeout 120 docker run --gpus all \
              -v "$(pwd)/test_images:/test_images" \
              "${{ env.IMAGE_TAG1 }}" \
              /app/upscale /test_images/input.jpg /test_images/output.jpg
          else
            echo "Running CPU mode..."
            timeout 120 docker run "${{ env.IMAGE_TAG1 }}" bash -c "test -x /app/build/bin/preprocess_c && echo OK"
          fi

  # ────────────────────────────── Dependabot Auto-Merge ──────────────────────────────
  dependabot-auto-merge:
    needs: lint-and-polish
    runs-on: ubuntu-latest
    if: github.actor == 'dependabot[bot]'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Merge Dependabot PR
        run: gh pr merge ${{ github.event.pull_request.number }} --squash --delete-branch=false
